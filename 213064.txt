4. git init
5. git remote add origin https://github.com/VerchePetrushevska/SI_2023_lab1_213064.git 
- команда која овозможува поврзување на локалниот репозиториум претходно иницијализиран со git init командата, со репозиториумот на github.
6. echo "Verche Petrushevska 213064" >> README.md 
- со оваа команда креирам README.md датотека, а она што следи веднаш после echo e всушност текстот кој ќе биде впишан во датотеката.
- за да направам commit so порака Initial commit, по создавањето на датотеката, ги користам следните команди :
  - git add . (команда со која сите фајлови што пред нејзина употреба се untracked, стануваат staged, во ситуацијава само README.md датотеката)
  - git commit -m "Initial commit" (команда со која правам commit на локалниот репозиториум со порака која ги опишува промените кои настанале, во случајов специфицира дека се работи за прв commit)
7. type nul > SILab1.java -> за да креираме празен фајл со име SILab1.java
- следуваат истите команди од горе : git add . и git commit -m "Add Java class"
8. git push -u origin master 
- за да се што било додадено на локалната master гранка се премести и на master гранката на origin репозиториумот на github.
9. git branch bug1
git branch bug2
git branch bug3
- за да ги креираме сите овие три гранки да се разгрануваат од мастер гранката, мора да се наоѓаме на таа гранка кога ги пишуваме командите
10. git checkout bug1
11. git commit -a -m "Fix wrong loop for reading"
-a се користи за најнапред модифицираниот фајл, во кој што < = беше сменето само во < за да се прочитаат точно N броеви, да се додаде во staged, па да биде спремен за commit
12. git checkout bug2
13. git commit -a -m "Fix wrong condition in filterOddNumbers"
- комит откако е сменет условот за проверка if(el % 2 == 1)
14. git checkout bug3
15. git commit -a -m "Fix method sumEvenNumbers" 
-  направена е промена за навистина да се најде збирот на парните броеви, наместо производот како што беше претходно, па тоа се комитува исто како погоре
16. git checkout bug1 
потоа, git push -u origin bug1
- истата постапка се повторува за сите три гранки, односно прво се префрламе на самата гранка која сакаме да ја синхронизираме со далечниот репозиториум, а потоа ја pushnuvame на github repo origin.
17. git checkout master
18. git merge bug1
- Во оваа ситуација спојувањето беше извршено со методот Fast-forward, што значи дека не настанаа никакви конфликтни промени помеѓу двете гранки, на мастер не беше извршена никаква промена во меѓувреме додека работевме на bug1.
19. git push origin master
20. git merge bug2 
- Ова спојување се изврши со the 'ort' strategy. Oваа стратегија беше избрана од причина што покрај нештата кои ги имаат како заеднички, и двете гранки имаа нешто различно, првата мастер гранка која ја споивме со bug1 претходно, така што во нејзе настана промена, и потоа промената која самите рачно ја направивме во bug2. Во овој случај од причина што не се работи за разлика во истата линија код(на исто место) овој конфликт не требаше рачно да го разрешиме, туку се беше автоматски решено. На ваков начин промените од двете гранки беа споени.
21. git push origin master
22. git checkout bug3
23. git rebase master
- оваа команда промените кои што ги имаме направено на гранката bug3 ги применува на мастер гранката, во овој случај не настанаа никакви конфликти до овде.
24. git checkout master
25. git merge bug3 
- Ова спојување се случи со Fast-forward методот, немаше никаква потреба од рачно разрешување на конфликти. Причината што овој пат беше искористен Fast-forward методот наместо the 'ort' strategy е претходното извршување на командата git rebase master, што всушност направи илузија дека промените кои ги направивме настрана на гранката bug3, беа направени директно врз мастер гранката.
26. git push --all --force
27. type nul > logs.txt
- копија на она што го печати командата git log -all